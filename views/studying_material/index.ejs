<section class="content bg-clr-contrast">
  <h2 class="fg-clr-light">Ενότητα 1 – Τα βασικά</h2>
  <article>
    <h3>Μεταβλητές</h3>
    <div class="content-grid">
      <p class="grid-col-span-2">
        Σκέψου το παρακάτω σενάριο… <br /><br />
        Θέλεις να μοιραστείς την συνταγή για κέικ της γιαγιάς σου με τους φίλους
        σου, και ξεκινάς να την γράφεις σε ένα μήνυμα στο κινητό σου. Στο τέλος
        που την ελέγχεις για λάθη, συνειδητοποιείς ότι έγραψες παντού λάθος την
        ποσότητα του μπέικιν-πάουντερ που χρειάζεται το κέικ και πρέπει να βρεις
        και να αλλάξεις αυτές τις ποσότητες μία-μία. Δεν θα ήταν τέλειο αν
        μπορούσες να αλλάξεις μόνο μία από αυτές και να αλλάξουν και οι άλλες;
        Αυτό που χρειάζεσαι είναι μία <strong>μεταβλητή</strong>!<br /><br />
        <code>bakingPowder = “1 κ.γ.”</code>, και το πρόβλημά σου λύθηκε.<br /><br />
        Η γιαγιά σου θα είναι περίφανη για εσένα!
      </p>

      <p class="grid-col-span-2">
        Μια μεταβλητή είναι ένα σύμβολο, ή μια συμβολοσειρά που αντιπροσωπεύει
        μια τιμή, η οποία μπορεί κάποια στιγμή να αλλάξει. Στην παραπάνω
        έκφραση, η <strong>μεταβλητή</strong> είναι το
        <code>bakingPowder</code>, και το <code>“1 κ.γ.”</code> είναι η τιμή,
        <strong>τύπου</strong> <code>String</code>, που εκχωρείται σε αυτήν με
        τον <strong>τελεστή</strong> εκχώρησης <code>=</code>.
      </p>

      <p class="grid-col-span-2">
        Στην <strong>Java</strong>, οι μεταβλητές έχουν συγκεκριμένους
        <strong>τύπους</strong>. Υπάρχουν πολλοί τύποι μεταβλητών, ανάμεσα στους
        οποίους βρίσκονται αριθμοί, λέξεις (συμβολοσειρές), κ.ά. Ακολουθούν
        μερικά παραδείγματα δήλωσης μεταβλητών.
      </p>
      <div class="code-grid grid-col-span-2">
        <pre><code class="java">int myFirstInteger = 10;      // Ακέραια μεταβλητή
double myFirstDouble = 15.4;  // Μεταβλητή κινητής υποδιαστολής
char myFirstCharacter = 'J';  // Χαρακτήρας
boolean myFirstBoolean = true;// Λογική μεταβλητή
String myFirstString = "Java";// Λέξη / Συμβολοσειρά
</code></pre>
      </div>
      <p class="grid-col-span-2">
        Κάθε πρωταρχικός τύπος μεταβλητής έχει ένα
        <strong>εύρος αναπαράστασης</strong>. Αν υπερβεί αυτό το εύρος
        <strong>υπερχειλίζει</strong>. Στον ακόλουθο πίνακα παρουσιάζονται τα
        εύρη αναπαράστασης των πρωταρχικών (<strong>primitive</strong>) τύπων
        μεταβλητών.<br /><br />
        Παρατήρησε ότι ο τύπος <strong>String</strong> δεν ανήκει στους
        primitive τύπους.
      </p>
      <div class="table-grid grid-col-span-2">
        <table class="hljs">
          <tr>
            <th>Τύπος Δεδομένων</th>
            <th>Εύρος αναπαράστασης</th>
            <th>Bit</th>
          </tr>
          <tr>
            <td>byte</td>
            <td>-2<sup>7</sup> έως 2<sup>7</sup>-1</td>
            <td>8</td>
          </tr>
          <tr>
            <td>short</td>
            <td>-2<sup>15</sup> έως 2<sup>15</sup>-1</td>
            <td>16</td>
          </tr>
          <tr>
            <td>int</td>
            <td>-2<sup>31</sup> έως 2<sup>31</sup>-1</td>
            <td>32</td>
          </tr>
          <tr>
            <td>long</td>
            <td>-2<sup>63</sup> έως 2<sup>63</sup>-1</td>
            <td>64</td>
          </tr>
          <tr>
            <td>float</td>
            <td>-2<sup>-149</sup> έως (2-2<sup>-23</sup>)*2<sup>127</sup></td>
            <td>32</td>
          </tr>
          <tr>
            <td>double</td>
            <td>-2<sup>-1024</sup> έως (2-2<sup>-52</sup>)*2<sup>1023</sup></td>
            <td>64</td>
          </tr>
          <tr>
            <td>char</td>
            <td>0 έως 2<sup>16</sup>-1</td>
            <td>16</td>
          </tr>
          <tr>
            <td>boolean</td>
            <td>true / false</td>
            <td>1</td>
          </tr>
        </table>
      </div>
      <p class="grid-col-span-2">
        Όπως προαναφέραμε, αν μια μεταβλητή υπερβεί το εύρος του τύπου της
        υπερχειλίζει. Στην Java, η υπερχείληση προκαλεί σφάλμα. Για παράδειγμα,
        δεν μπορούμε να δηλώσουμε ένα <code>byte</code> με τιμές μικρότερες του
        <code>-128</code> και τιμές μεγαλύτερες του <code>127</code>.
      </p>
      <p class="grid-col-span-2">
        <strong>Bonus - Παρατήρησες τους ειδικούς χαρακτήρες;</strong
        ><br /><br />
        Το Ελληνικό ερωτηματικό, ή semicolon (<code>;</code>) χρησιμοποιείται
        για τον διαχωρισμό των διαφόρων εντολών μεταξύ τους και είναι
        <strong>υποχρεωτικό</strong> στην Java.
      </p>
      <p>
        Η διπλή κάθετος (<code>//</code>) χρησιμοποιείται για να προσθέσουμε
        σχόλια στο πρόγραμμα μας. Τα σχόλια που ξεκινούν με διπλή κάθετο είναι
        μόνο για την γραμμή εκείνη.<br /><br />
        Υπάρχουν όμως και τα σχόλια πολλαπλών γραμμών, τα οποία χρησιμοποιούμε
        όταν θέλουμε να γράψουμε, για παράδειγμα, αναλυτική περιγραφή ενός
        τμήματος κώδικα.<br /><br />
        Τα σχόλια πολλαπλών γραμμών δεν χρειάζεται υποχρεωτικά να είναι μεγάλα.
        Μπορούν επίσης να χρησιμοποιηθούν για να προσθέσουμε σχόλιο ανάμεσα σε
        εντολές χωρίς να επηρεάσουμε την λειτουργία του προγράμματος.
      </p>
      <div class="code-grid centered-code">
        <pre><code class="java">// Σχόλιο γραμμής

// Λάθος
σχόλιο

/*
  Σχόλιο πολλαπλών
  γραμμών
*/

int a = /* πέντε */ 5;
</code></pre>
      </div>
      <p class="grid-col-span-2">
        Τα σχόλια αυτά αγνοούνται από τον υπολογιστή και τα χρησιμοποιούμε για
        να καταγράψουμε τι κάνουμε σε κάποια γραμμή κώδικα.
      </p>
    </div>
  </article>
  <article>
    <h3>Τελεστές</h3>
    <div class="content-grid">
      <p class="grid-col-span-2">
        Οι <strong>τελεστές</strong> είναι σύμβολα τα οποία χρησιμοποιούμε για
        να “πειράξουμε” τις μεταβλητές. Ακολουθεί πίνακας με μερικούς από τους
        ποιο βασικούς.
      </p>
      <div class="table-grid grid-col-span-2">
        <table class="hljs">
          <tr>
            <th>Τελεστής</th>
            <th>Περιγραφή</th>
            <th>Χρήση</th>
          </tr>
          <tr>
            <td>=</td>
            <td>
              Τελεστής εκχώρησης - εκχωρεί την τιμή από την αριστερή του μεριά
              στην μεταβλητή που βρίσκεται στα δεξιά του
            </td>
            <td><code>int a = b;</code></td>
          </tr>
          <tr>
            <td>+</td>
            <td>
              Τελεστής πρόσθεσης - προσθέτει δύο αριθμητικές τιμές. Μπορεί να
              χρησιμοποιηθεί και για να ενώσει δύο <code>String</code>
            </td>
            <td><code>int c = a + b;</code></td>
          </tr>
          <tr>
            <td>-</td>
            <td>
              Αριθμητικός τελεστής αφαίρεσης - αφαιρεί την τιμή του δεξιού
              μέλους από αυτή στο αριστερό
            </td>
            <td><code>int c = a - b;</code></td>
          </tr>
          <tr>
            <td>*</td>
            <td>
              Αριθμητικός τελεστής γινομένου - πολλαπλασιάζει μεταξύ τους δύο
              τιμές
            </td>
            <td><code>int c = a * b;</code></td>
          </tr>
          <tr>
            <td>/</td>
            <td>
              Αριθμητικός τελεστής διαίρεσης - διαιρεί την τιμή στο αριστερό
              μέλος κατά όσες φορές ορίζει η τιμή στο δεξί
            </td>
            <td><code>int c = a / b;</code></td>
          </tr>
          <tr>
            <td>==</td>
            <td>
              Λογικός τελεστής ισότητας - συγκρίνει δύο τιμές μεταξύ τους και
              επιστρέφει
              <code>true</code> αν είναι ίσες, αλλιώς επιστρέφει
              <code>false</code>
            </td>
            <td>boolean c = a == b;</td>
          </tr>
          <tr>
            <td>!=</td>
            <td>
              Λογικός τελεστής διαφοράς - συγκρίνει δύο τιμές μεταξύ τους και
              επιστρέφει
              <code>false</code> αν είναι ίσες, αλλιώς επιστρέφει
              <code>true</code>
            </td>
            <td>boolean c = a != b;</td>
          </tr>
          <tr>
            <td><=</td>
            <td>
              Λογικός τελεστής ανισότητας (μικρότερο ή ίσο) - συγκρίνει δύο
              τιμές μεταξύ τους και επιστρέφει
              <code>true</code> αν είναι ίσες ή αν αυτή στα δεξιά είναι
              μικρότερη, αλλιώς επιστρέφει <code>false</code>. Ομοίως
              λειτουργουν και οι τελεστές (<code><, >, >=</code>)
            </td>
            <td>boolean c = a <= b;</td>
          </tr>
          <tr>
            <td>&&</td>
            <td>
              Λογικός τελεστής "ΚΑΙ" - επιστρέφει <code>true</code> αν
              <strong>και τα δύο</strong> μέλη είναι <code>true</code>, αλλιώς
              επιστρέφει <code>false</code>
            </td>
            <td>boolean c = a && b;</td>
          </tr>
          <tr>
            <td>||</td>
            <td>
              Λογικός τελεστής "Η (διαζευκτικό)" - επιστρέφει
              <code>false</code> αν <strong>και τα δύο</strong> μέλη είναι
              <code>false</code>, αλλιώς επιστρέφει <code>true</code>
            </td>
            <td>boolean c = a || b;</td>
          </tr>
          <tr>
            <td>!</td>
            <td>
              Λογικός τελεστής "ΟΧΙ (αντιστροφέας)" - επιστρέφει
              <code>true</code> αν η τιμή είναι <code>false</code>, αλλιώς
              επιστρέφει <code>true</code>
            </td>
            <td>boolean c = !a;</td>
          </tr>
        </table>
      </div>
    </div>
  </article>
  <article>
    <h3>Δομή Ελέγχου</h3>
    <div class="content-grid">
      <p class="grid-col-span-2">
        Η <strong>δομή ελέγχου</strong> είναι από τα ποιο βασικά εργαλεία στον
        προγραμματισμό. Βασιζόμαστε σε αυτή για την λογική του προγράμματος που
        γράφουμε.
      </p>
      <div class="list grid-row-span-3">
        <p>
          Η δομή ελέγχου έχει τρεις μορφές, όπως αυτές φαίνονται στα τμήματα
          κώδικα.
        </p>
        <ol>
          <li>Την απλή. <code>if</code></li>
          <li>Την απλή, με εναλλακτική. <code>if/else</code></li>
          <li>Τη σύνθετη. <code>if/else if/else</code></li>
        </ol>
        <p>
          Η συνθήκη που δέχεται η δομή ελέγχου καθορίζει ποιο μέρος της θα
          εκτελεστεί όταν ο υπολογιστής διαβάζει το πρόγραμμα.<br /><br />
          <strong>Αν</strong> η συνθήκη είναι
          <strong>αληθής</strong> (<code>true</code>), εκτελείτε το πρώτο τμήμα
          κώδικα, <strong>αλλιώς</strong> - αν υπάρχει - το δεύτερο. Στην
          περίπτωση των σύνθετων δομών ελέχγου, πραγματοποιείται επίσης έλεγχος
          των ενδιάμεσων συνθηκών.<br /><br />
          Στην περίπτωση της δεύτερης και της τρίτης μορφής, εκτελείτε μόνο η
          πρώτη αληθής συνθήκη και δεν γίνεται έλεγχος της επόμενης.<br /><br />
          Ακολουθεί πρακτικό παράδειγμα χρήσης δομής ελέγχου.
        </p>
      </div>
      <div class="code-grid">
        <pre><code class="java">// Απλή δομή ελέγχου
if (/* συνθήκη */) {
  // κάνε κάτι
}</code></pre>
      </div>
      <div class="code-grid">
        <pre><code class="java">// Απλή δομή ελέγχου με εναλλακτική
if (/* συνθήκη */) {
  // κάνε κάτι
}
else {
  // κάνε κάτι άλλο
}</code></pre>
      </div>
      <div class="code-grid">
        <pre><code class="java">// Σύνθετη δομή ελέγχου
if (/* συνθήκη 1 */) {
  // κάνε κάτι
}
else if (/* συνθήκη 2 */) {
  // κάνε κάτι άλλο
}
else {
  // κάνε κάτι άλλο
}</code></pre>
      </div>
      <div class="code-grid grid-col-span-2">
        <pre><code class="java">int number = 2;

if (number > 3) {
  System.out.println("Ο αριθμός είναι μεγαλύτερος του 3!");
}
else if (number < 3) {
  System.out.println("Ο αριθμός είναι μικρότερος του 3!");
}
else {
  System.out.println("Ο αριθμός είναι το 3!");
}
</code></pre>
      </div>
      <p class="grid-col-span-2">Απάντηση</p>
      <div class="code-grid grid-col-span-2">
        <pre><code class="bash">Ο αριθμός είναι μικρότερος του 3!</code></pre>
      </div>
      <p class="grid-col-span-2">
        <strong>Bonus - Παρατήρησες κάτι καινούργιο; Μην τρομάζεις!</strong
        ><br /><br />
        Η μέθοδος <code>System.out.println()</code> χρησιμοποιείται στην Java
        για την εκτύπωση δεδομένων στην κονσόλα.<br /><br />
        Τι είναι η <strong>μέθοδος</strong>; Αυτο θα το δούμε παρακάτω στις
        <strong>κλάσεις</strong>!
      </p>
    </div>
  </article>
  <article>
    <h3>Δομές Επανάληψης</h3>
    <div class="content-grid">
      <p class="grid-col-span-2">
        Με πολύ απλά λόγια, μια δομή επανάληψης περιέχει μια διαδικασία που
        επαναλαμβάνεται.<br /><br />
        Η Java έχει τρεις βασικές δομές επανάληψης: την <code>for</code>, την
        <code>while</code>, και την <code>do - while</code>. Κάθε μια από αυτές
        για να δουλέψει χρειάζεται μια συνθήκη. Στην περίπτωση των δομών
        <code>while</code> και <code>do - while</code> οι συνθήκες είναι όπως
        αυτές που είδαμε στις δομές ελέγχου, ενώ στην δομή
        <code>for</code> διαφέρει λίγο. Η πιο συνηθισμένη συνθήκη της δομής
        <code>for</code> έχει αυτή τη μορφή
        <code>for(int i = 0; i < end; i++)</code>.
      </p>
      <p>
        Ας δούμε αυτό το παράδειγμα για την δομή <code>for</code>, για να την
        κατανοήσουμε καλύτερα.<br /><br />
        Η συνθήκη χωρίζεται σε τρία μέρη με το semicolon, το οποίο έχουμε
        αναφέρει πως χωρίζει εντολές μεταξύ τους.<br /><br />
        Στο πρώτο μέρος αρχικοποιούμε μια μεταβλητή
        <code>i</code> με την τιμή <code>0</code>.<br />
        Στο δεύτερο μέρος ορίζουμε μια συνθήκη όπως αυτές που είδαμε στις δομές
        ελέγχου. Αν η συνθήκη είναι <code>true</code> η δομή επανάληψης
        εκτελείται.<br />
        Και, τέλος στο τρίτο μέρος κάνουμε μία πράξη - το βήμα της επανάληψης.
        Αφού εκτελεστεί η δομή, το <code>i</code> θα πάρει την τιμή αυτή που
        ορίζει η πράξη στο βήμα.
      </p>
      <div class="code-grid centered-code">
        <pre><code class="java">/*
for (αρχή; συνθήκη; βήμα) {
  ενέργειες
}
*/

// Η δομή θα εκτελεστεί 10 φορές
for (int i = 0; i < 10; i = i + 1) {
  System.out.println("κέικ");
}

// Η δομή θα εκτελεστεί 5 φορές
for (int i = 0; i < 10; i = i + 2) {
  System.out.println("μπέικιν-πάουντερ")
}
</code></pre>
      </div>
      <p class="grid-col-span-2">
        Η δομές <code>while</code> και <code>do - while</code> λειτουργούν με
        παρόμοιο τρόπο. Ωστόσο, και για τις δύο χρειαζόμαστε μια μεταβλητή που
        θα χρησιμοποίησουμε στην συνθήκη, και θα έχει δηλωθεί έξω από τη δομή,
        την συνθήκη, και κάποιο βήμα εντός της επανάληψης.
      </p>
      <p>
        Η δομή <code>while</code> πραγματοποιεί έλεγχο της συνθήκης πριν
        εκτελέσει τον κώδικα στο εσωτερικό της, πράγμα που σημαίνει ότι αν η
        συνθήκη είναι εξαρχής <code>false</code> ο κώδικας δεν θα εκτελεστεί
        ποτέ.
      </p>
      <div class="code-grid centered-code">
        <pre><code class="java">int i = 0;
while (i < 10) {
  System.out.println("Hello");
  i = i + 1;
}</code></pre>
      </div>
      <p>
        Η δομή <code>do - while</code> λειτουργεί σχεδόν με τον ίδιο τρόπο όπως
        η <code>while</code> αλλά, ο κώδικας πάντα θα εκτελείται τουλάχιστον μια
        φορά. Γιατί; Πολύ απλα, επειδή ο έλεγχος της συνθήκης γίνεται στο τέλος
        της κάθε εκτέλεσης.
      </p>
      <div class="code-grid centered-code">
        <pre><code class="java">int i = 0;
do {
  System.out.println("World")
  i = i + 1;
} while (i < 10);</code></pre>
      </div>
      <p>
        <strong>Προσοχή</strong>, αν ή συνθήκη είναι πάντα αληθής σε μια
        επανάληψη, τότε έχουμε πρόβλημα
        <strong>ατέρμων βρόχου</strong> (infinite loop), μια επαναληπτική
        διαδικασία που δεν τελειώνει ποτέ!
      </p>
      <div class="code-grid centered-code">
        <pre><code class="java">while (true) {
  System.out.println("Infinite Loop!")
}</code></pre>
      </div>
      <p class="grid-col-span-2">
        <strong
          >Bonus - Τελεστές <code>++</code>, <code>--</code>, <code>+=</code>,
          <code>-=</code></strong
        ><br /><br />
        Πολλές φορές, στις δομές επανάληψης, και κυρίως την <code>for</code>,
        στο βήμα μπορεί να δούμε έναν από τους παραπάνω τελεστές. Οι τελεστές
        <code>++</code> και <code>--</code> είναι για αύξηση ή μείωση μιας
        αριθμητικής τιμής κατά 1, ενώ οι τελεστές <code>+=</code> και
        <code>-=</code> είναι για αύξση ή μείωση μιας αριθμητικής τιμής κατά
        κάποια τιμή που ορίζουμε εμείς.<br /><br />

        Για παράδειγμα, έστω <code>int num = 1;</code>, τότε<br /><br />
        <code>num++; //num = 2</code><br />
        <code>num--; //num = 1, μείωση κατά 1 από το παραπάνω παράδειγμα</code
        ><br />
        <code>num += 3; //num = 4</code><br />
        <code>num -= 5; //num = -1</code>
      </p>
    </div>
  </article>
</section>
<div class="fade-in popup-msg">
  <p class="centered-text">
    Η επόμενη ενότητα αφορά τις <strong>κλάσεις</strong>.
  </p>
  <p class="centered-text">
    Οι κλάσεις είναι ένα πολύ σημαντικό τμήμα της Java, και είναι σημαντικό να
    τις κατανοήσεις.
  </p>
  <p class="centered-text">Καλή τύχη!</p>
</div>
<section class="content bg-clr-contrast unit-theory">
  <h2 class="fg-clr-light">Ενότητα 2 - Κλάσεις, Μέθοδοι, Αντικείμενα</h2>
  <article>
    <div class="content-grid">
      <p>
        Μια κλάση στη Java είναι ένα πρότυπο που χρησιμοποιείται για τη
        δημιουργία αντικειμένων και τον ορισμό τύπων και μεθόδων δεδομένων
        αντικειμένων. Οι κλάσεις είναι κατηγορίες και τα αντικείμενα είναι
        στοιχεία σε κάθε κατηγορία. Όλα τα αντικείμενα κλάσης πρέπει να έχουν
        τις βασικές ιδιότητες κλάσης.
      </p>
      <div class="code-grid centered-code">
        <pre><code class="java">class Cake {
// Αυτή είναι μια κλάση
}</code></pre>
      </div>
    </div>
  </article>
  <article>
    <h3>Μέθοδοι</h3>
    <div class="content-grid">
      <p class="grid-col-span-2">
        Μια μέθοδος είναι ένα μπλοκ κώδικα που εκτελείται μόνο όταν καλείται.
        Μπορείτε να μεταβιβάσετε δεδομένα, γνωστά ως παράμετροι, σε μια μέθοδο.
        Οι μέθοδοι χρησιμοποιούνται για την εκτέλεση συγκεκριμένων ενεργειών και
        είναι επίσης γνωστές ως συναρτήσεις. Μπορεί να επιστρέφουν κάποια τιμή
        μετά το πέρας της εκτέλεσης τους. Οι μέθοδοι που έχουν τύπο
        <code>void</code> δεν επιστρέφουν καμία τιμή, ενώ εκείνες που έχουν τύπο
        πρέπει οπωσδήποτε να επιστρέφουν μια τιμή αυτού του τύπου.
      </p>
      <div class="code-grid">
        <pre><code class="java">void AddSugar() {
  // Αυτή είναι μια μέθοδος
  // Δεν επιστρέφει τίποτα
}</code></pre>
      </div>
      <div class="code-grid">
        <pre><code class="java">int GetEggs() {
  // Αυτή είναι μια μέθοδος
  // Επιστρέφει έναν ακέραιο
  return 1;
}</code></pre>
      </div>
      <p class="grid-col-span-2">
        Η κύρια μέθοδος Java είναι το σημείο εισόδου οποιουδήποτε προγράμματος
        java. Η σύνταξή του είναι πάντα
        <code>public static void main(String[] args)</code>. Μπορείτε να
        αλλάξετε μόνο το όνομα του ορίσματος του πίνακα <code>String</code>, για
        παράδειγμα μπορείτε να αλλάξετε τα <code>args</code> σε
        <code>myStringArgs</code>.
      </p>
      <div class="code-grid grid-col-span-2">
        <pre><code class="java">class Cake {
  public static void main(String[] args) {
    System.out.println("CAKE CAKE CAKE!");
  }
}</code></pre>
      </div>
      <p class="grid-col-span-2">
        Οι <strong>getters</strong> και οι
        <strong>setters</strong> χρησιμοποιούνται για την προστασία των
        δεδομένων σας, ιδιαίτερα κατά τη δημιουργία κλάσεων. Για κάθε μεταβλητή
        της κλάσης, μια μέθοδος getter επιστρέφει την τιμή της ενώ μια μέθοδος
        setter ορίζει ή ενημερώνει την τιμή της. Συνήθως βλέπουμε getters και
        setters όταν οι μεταβλητές-μέλη της κλάσης δηλώνονται ως
        <code>private</code> ή <code>protected</code>.
      </p>
    </div>
  </article>
  <article>
    <h3>Παράδειγμα</h3>
    <div class="content-grid">
      <div class="code-grid grid-col-span-2">
        <pre><code class="java">import java.util.ArrayList;
import java.util.Scanner;

public class CakeRecipe {
  public static void main(String[] args) {
    MethodForRecipe();
  }

  static void MethodForRecipe() {
    Scanner sc = new Scanner(System.in);
    ArrayList&ltString&gt recipe = new ArrayList<>();
    String line;
    System.out.println("Δώσε τα υλικά της συνταγής (0 για τέλος"):;
    while(sc.hasNext()){  // Διαβάζει δεδομένα εισόδου από τον χρήστη
      line = sc.nextLine(); // Αποθηκεύει τα δεδομένα σε μεταβλητή
      if(line.equals("0"))
          break;
      System.out.println("Επόμενο υλικό:");
      recipe.add(line); // προσθέτει τα δεδομένα στο ArrayList
    }
    System.out.println("Τα υλικά είναι: " + recipe);
  }
}</code></pre>
      </div>

      <p class="grid-col-span-2">
        <strong>Bonus - ArrayList, Scanner <br /><br /></strong>
        Το <code>ArrayList</code> αντικείμενο της ομώνυμης κλάσης προσφέρει
        δυναμικούς πίνακες, δηλαδή μια δομή δεδομένων που μπορεί να αποθηκεύση
        πολλά δεδομένα του ίδιου τύπου. <br /><br />
        Το <code>Scanner</code> αντικείμενο της ομώνυμης κλάσης χρησιμοποιείται
        για το "διάβασμα" δεδομένων από κάποια πηγή, π.χ. το πληκτρολόγιο
        (<code>System.In</code>). <br /><br />
        Θα μιλήσουμε για αντικείμενα και παρακάτω.
      </p>
    </div>
  </article>
  <article>
    <h3>Κατασκευαστές και αντικείμενα</h3>
    <div class="content-grid">
      <p>
        Ένας κατασκευαστής στην Java είναι μια ειδική μέθοδος που
        χρησιμοποιείται για την προετοιμασία και την αρχικοποίηση των
        μεταβλητών-μέλων ενώς αντικειμένου και καλείται όταν δημιουργείται ένα
        αντικείμενο μιας κλάσης, το οποίο γίνεται με τον ίδιο τρόπο που δίνουμε
        τύπο σε μια μεταβλητή. Πχ. <br /><br />
        <code>Cake birthdayCake = new Cake();</code>
      </p>
      <div class="code-grid">
        <pre><code class="java">public class Cake {
  public Cake() {
    /*
    Κατασκευαστής της 
    κλάσης Cake
    */
  }
}</code></pre>
      </div>
      <p class="grid-col-span-2">
        Default Κατασκευαστής (Default Constructor) λέγεται ο προεπιλεγμένος
        κατασκευαστής που δημιουργείται αυτόματα από το πρόγραμμα, ή που
        ορίζεται από τον προγραμματιστή. Ο default κατασκευαστής δεν παίρνει
        παραμέτρους. (βλ. τον κατασκευαστή της κλάσης Cake)
      </p>
      <p>
        Overloaded Κατασκευαστής (Overloaded Constructor) είναι ο κατασκευαστής
        που δημιουργείται με παραμέτρους. Αν θέλουμε για παράδειγμα να ορίζουμε
        κάποιες παραμέτρους με βάση τα στοιχεία εισόδου ενώς χρήστη, μπορούμε να
        χρησιμοποίησουμε Overloaded Κατασκευαστές. <br /><br />
        Πχ. <br /><br />
        <code>Cake birthdayCake = new Cake(typeOfCake);</code> <br /><br />
        Όπου η μεταβλητή typeOfCake δηλώνεται κάπου στο πρόγραμμα και κρατάει
        μια τιμή που έδωσε ο χρήστης.
      </p>
      <div class="code-grid">
        <pre><code class="java">public class Cake {
  private String cakeType;

  // Default
  public Cake() {
    this.cakeType = "vanilla";
  }

  // Overloaded
  public Cake(String type) {
    this.cakeType = type;
  }
}</code></pre>
      </div>
      <p class="grid-col-span-2">
        Όπως φαίνεται από το προηγούμενο τμήμα κώδικα, ένα πρόγραμμα μπορεί να
        περιέχει πολλούς διαφορετικούς κατασκευαστές και κάθε φορά καλείται
        αυτός που αντιστοιχεί στον κώδικα που έχουμε γράψει.
      </p>
      <p class="grid-col-span-2">
        Τα αντικείμενα στη Java είναι στιγμιότυπα κλάσεων. Για παράδειγμα, για
        να δημιουργήσουμε ένα αντικέιμενο (object)/στιγμιότυπο (instance) μιας
        κλάσης γράφουμε: <br /><br />
        <code>Cake birthdayCake = new Cake();</code>
      </p>
      <p class="grid-col-span-2">
        <strong>Bonus - this</strong><br /><br />
        Το <code>this</code> keyword χρησιμοποείται εντώς των κλάσεων όταν
        θέλουμε να αναφερθούμε αποκλειστικά σε μέλη αυτής της κλάσης.
      </p>
    </div>
  </article>
</section>
<div class="fade-in popup-msg">
  <p class="centered-text">
    Η επόμενη ενότητα αφορά τις έννοιες
    <strong>κληρονομικότητα, ενθυλάκωση & διεπαφές</strong>.
  </p>
  <p class="centered-text">
    Οι παραπάνω έννοιες περιγράφουν κάποια πολύ σημαντικά πεδία του
    αντικειμενοστραφή προγραμματισμού και θέλουν πολύ προσοχή και εξάσκηση για
    να γίνουν κατανοητές!
  </p>
  <p class="centered-text">Καλή τύχη!</p>
</div>
<section class="content bg-clr-contrast unit-theory">
  <h2 class="fg-clr-light">Unit 3</h2>
  <article>
    <h3>Κληρονομικότητα</h3>
    <div class="content-grid">
      <p class="grid-col-span-2">
        Η κληρονομικότητα είναι ένα από τα βασικά χαρακτηριστικά του OOP που μας
        επιτρέπει να δημιουργήσουμε μια νέα κλάση από μια υπάρχουσα κλάση. Η νέα
        κλάση που δημιουργείται είναι γνωστή ως υποκλάση (παιδική ή παράγωγη
        κλάση) και η υπάρχουσα κλάση από την οποία προέρχεται η θυγατρική κλάση
        είναι γνωστή ως υπερκλάση (γονική ή βασική κλάση).
      </p>
    </div>
  </article>
  <article>
    <h3>Ενθυλάκωση</h3>
    <div class="content-grid">
      <p class="grid-col-span-2">
        Η ενθυλάκωση είναι ένα από τα βασικά χαρακτηριστικά του
        αντικειμενοστρεφούς προγραμματισμού. Η ενθυλάκωση αναφέρεται στη
        ομαδοποίηση πεδίων και μεθόδων μέσα σε μια κλάση. Εμποδίζει τις
        εξωτερικές κλάσεις να έχουν πρόσβαση και να αλλάζουν πεδία και μεθόδους
        μιας κλάσης. Αυτό βοηθά επίσης στην επίτευξη απόκρυψης δεδομένων.
      </p>
    </div>
  </article>
  <article>
    <h3>Διεπαφές</h3>
    <div class="content-grid">
      <p class="grid-col-span-2">
        Μια διεπαφή στη γλώσσα προγραμματισμού Java ορίζεται ως ένας αφηρημένος
        τύπος που χρησιμοποιείται για τον καθορισμό της συμπεριφοράς μιας
        κλάσης. Μια διεπαφή σε Java είναι ένα προσχέδιο μιας κλάσης. Μια διεπαφή
        Java περιέχει στατικές σταθερές και αφηρημένες μεθόδους. Η διεπαφή στη
        Java είναι ένας μηχανισμός για την επίτευξη αφαίρεσης.
      </p>
    </div>
  </article>
  <article>
    <h3>Παράδειγμα</h3>
    <div class="content-grid">
      <p class="grid-col-span-2">Αρχείο <code>canine.java</code></p>
      <div class="code-grid grid-col-span-2">
        <pre><code class="java">public class Canine {
  public static void main(String[] args) {
    Dog barky = new Dog();
    barky.bark();
    barky.eat();

    PitBull pit = new PitBull();
    pit.bark();
    pit.eat();
  }
}</code></pre>
      </div>
      <p class="grid-col-span-2">Αρχείο <code>dog.java</code></p>
      <div class="code-grid grid-col-span-2">
        <pre><code class="java">class Dog extends Wolf {
  boolean wildAnimal = false;
  Dog() {}
}</code></pre>
      </div>
      <p class="grid-col-span-2">Αρχείο <code>pitbull.java</code></p>
      <div class="code-grid grid-col-span-2">
        <pre><code class="java">class PitBull implements WolfInterface{
  boolean wildAnimal = false;
  PitBull() {}

  @Override
  public void bark() {
    System.out.println("Woof");
  }

  @Override
  public void eat() {
    System.out.println("Yum yum");
  }
}</code></pre>
      </div>
      <p class="grid-col-span-2">Αρχείο <code>wolf.java</code></p>
      <div class="code-grid grid-col-span-2">
        <pre><code class="java">class Wolf{
  int legs;
  boolean wildAnimal = true;
  Wolf(int legs) {
    this.legs = legs;
  }

  Wolf() {
    this.legs = 4;
  }

  void bark() {
    System.out.println("Extended from wolf class");
  }

  void eat(){
    System.out.println("Extended from wolf class");
  }
}</code></pre>
      </div>
      <p class="grid-col-span-2">Αρχείο <code>wolfinterface.java</code></p>
      <div class="code-grid grid-column-span-2">
        <pre><code class="java">interface WolfInterface {
  void bark();
  void eat();
}</code></pre>
      </div>
    </div>
  </article>
</section>
