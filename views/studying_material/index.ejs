<section class="content bg-clr-contrast">
  <h2 class="fg-clr-light">Ενότητα 1 – Τα βασικά</h2>
  <article>
    <h3>Μεταβλητές</h3>
    <div class="content-grid">
      <p class="grid-col-span-2">
        Σκέψου το παρακάτω σενάριο… <br /><br />
        Θέλεις να μοιραστείς την συνταγή για κέικ της γιαγιάς σου με τους φίλους
        σου, και ξεκινάς να την γράφεις σε ένα μήνυμα στο κινητό σου. Στο τέλος
        που την ελέγχεις για λάθη, συνειδητοποιείς ότι έγραψες παντού λάθος την
        ποσότητα του μπέικιν-πάουντερ που χρειάζεται το κέικ και πρέπει να βρεις
        και να αλλάξεις αυτές τις ποσότητες μία-μία. Δεν θα ήταν τέλειο αν
        μπορούσες να αλλάξεις μόνο μία από αυτές και να αλλάξουν και οι άλλες;
        Αυτό που χρειάζεσαι είναι μία <strong>μεταβλητή</strong>!<br /><br />
        <code>bakingPowder = “1 κ.γ.”</code>, και το πρόβλημά σου λύθηκε.<br /><br />
        Η γιαγιά σου θα είναι περίφανη για εσένα!
      </p>

      <p class="grid-col-span-2">
        Μια μεταβλητή είναι ένα σύμβολο, ή μια συμβολοσειρά που αντιπροσωπεύει
        μια τιμή, η οποία μπορεί κάποια στιγμή να αλλάξει. Στην παραπάνω
        έκφραση, η <strong>μεταβλητή</strong> είναι το
        <code>bakingPowder</code>, και το <code>“1 κ.γ.”</code> είναι η τιμή,
        <strong>τύπου</strong> <code>String</code>, που εκχωρείται σε αυτήν με
        τον <strong>τελεστή</strong> εκχώρησης <code>=</code>.
      </p>

      <p class="grid-col-span-2">
        Στην <strong>Java</strong>, οι μεταβλητές έχουν συγκεκριμένους
        <strong>τύπους</strong>. Υπάρχουν πολλοί τύποι μεταβλητών, ανάμεσα στους
        οποίους βρίσκονται αριθμοί, λέξεις (συμβολοσειρές), κ.ά. Ακολουθούν
        μερικά παραδείγματα δήλωσης μεταβλητών.
      </p>
      <div class="code-grid grid-col-span-2">
        <pre><code class="java">int myFirstInteger = 10;      // Ακέραια μεταβλητή
double myFirstDouble = 15.4;  // Μεταβλητή κινητής υποδιαστολής
char myFirstCharacter = 'J';  // Χαρακτήρας
boolean myFirstBoolean = true;// Λογική μεταβλητή
String myFirstString = "Java";// Λέξη / Συμβολοσειρά
</code></pre>
      </div>
      <p class="grid-col-span-2">
        Κάθε πρωταρχικός τύπος μεταβλητής έχει ένα
        <strong>εύρος αναπαράστασης</strong>. Αν υπερβεί αυτό το εύρος
        <strong>υπερχειλίζει</strong>. Στον ακόλουθο πίνακα παρουσιάζονται τα
        εύρη αναπαράστασης των πρωταρχικών (<strong>primitive</strong>) τύπων
        μεταβλητών.<br /><br />
        Παρατήρησε ότι ο τύπος <strong>String</strong> δεν ανήκει στους
        primitive τύπους.
      </p>
      <div class="table-grid grid-col-span-2">
        <table class="hljs">
          <tr>
            <th>Τύπος Δεδομένων</th>
            <th>Εύρος αναπαράστασης</th>
            <th>Bit</th>
          </tr>
          <tr>
            <td>byte</td>
            <td>-2<sup>7</sup> έως 2<sup>7</sup>-1</td>
            <td>8</td>
          </tr>
          <tr>
            <td>short</td>
            <td>-2<sup>15</sup> έως 2<sup>15</sup>-1</td>
            <td>16</td>
          </tr>
          <tr>
            <td>int</td>
            <td>-2<sup>31</sup> έως 2<sup>31</sup>-1</td>
            <td>32</td>
          </tr>
          <tr>
            <td>long</td>
            <td>-2<sup>63</sup> έως 2<sup>63</sup>-1</td>
            <td>64</td>
          </tr>
          <tr>
            <td>float</td>
            <td>-2<sup>-149</sup> έως (2-2<sup>-23</sup>)*2<sup>127</sup></td>
            <td>32</td>
          </tr>
          <tr>
            <td>double</td>
            <td>-2<sup>-1024</sup> έως (2-2<sup>-52</sup>)*2<sup>1023</sup></td>
            <td>64</td>
          </tr>
          <tr>
            <td>char</td>
            <td>0 έως 2<sup>16</sup>-1</td>
            <td>16</td>
          </tr>
          <tr>
            <td>boolean</td>
            <td>true / false</td>
            <td>1</td>
          </tr>
        </table>
      </div>
      <p class="grid-col-span-2">
        Όπως προαναφέραμε, αν μια μεταβλητή υπερβεί το εύρος του τύπου της
        υπερχειλίζει. Στην Java, η υπερχείληση προκαλεί σφάλμα. Για παράδειγμα,
        δεν μπορούμε να δηλώσουμε ένα <code>byte</code> με τιμές μικρότερες του
        <code>-128</code> και τιμές μεγαλύτερες του <code>127</code>.
      </p>
      <p class="grid-col-span-2">
        <strong>Bonus - Παρατήρησες τους ειδικούς χαρακτήρες;</strong
        ><br /><br />
        Το Ελληνικό ερωτηματικό, ή semicolon (<code>;</code>) χρησιμοποιείται
        για τον διαχωρισμό των διαφόρων εντολών μεταξύ τους και είναι
        <strong>υποχρεωτικό</strong> στην Java.
      </p>
      <p>
        Η διπλή κάθετος (<code>//</code>) χρησιμοποιείται για να προσθέσουμε
        σχόλια στο πρόγραμμα μας. Τα σχόλια που ξεκινούν με διπλή κάθετο είναι
        μόνο για την γραμμή εκείνη.<br /><br />
        Υπάρχουν όμως και τα σχόλια πολλαπλών γραμμών, τα οποία χρησιμοποιούμε
        όταν θέλουμε να γράψουμε, για παράδειγμα, αναλυτική περιγραφή ενός
        τμήματος κώδικα.<br /><br />
        Τα σχόλια πολλαπλών γραμμών δεν χρειάζεται υποχρεωτικά να είναι μεγάλα.
        Μπορούν επίσης να χρησιμοποιηθούν για να προσθέσουμε σχόλιο ανάμεσα σε
        εντολές χωρίς να επηρεάσουμε την λειτουργία του προγράμματος.
      </p>
      <div class="code-grid centered-code">
        <pre><code class="java">// Σχόλιο γραμμής

// Λάθος
σχόλιο

/*
  Σχόλιο πολλαπλών
  γραμμών
*/

int a = /* πέντε */ 5;
</code></pre>
      </div>
      <p class="grid-col-span-2">
        Τα σχόλια αυτά αγνοούνται από τον υπολογιστή και τα χρησιμοποιούμε για
        να καταγράψουμε τι κάνουμε σε κάποια γραμμή κώδικα.
      </p>
    </div>
  </article>
  <article>
    <h3>Τελεστές</h3>
    <div class="content-grid">
      <p class="grid-col-span-2">
        Οι <strong>τελεστές</strong> είναι σύμβολα τα οποία χρησιμοποιούμε για
        να “πειράξουμε” τις μεταβλητές. Ακολουθεί πίνακας με μερικούς από τους
        ποιο βασικούς.
      </p>
      <div class="table-grid grid-col-span-2">
        <table class="hljs">
          <tr>
            <th>Τελεστής</th>
            <th>Περιγραφή</th>
            <th>Χρήση</th>
          </tr>
          <tr>
            <td>=</td>
            <td>
              Τελεστής εκχώρησης - εκχωρεί την τιμή από την αριστερή του μεριά
              στην μεταβλητή που βρίσκεται στα δεξιά του
            </td>
            <td><code>int a = b;</code></td>
          </tr>
          <tr>
            <td>+</td>
            <td>
              Τελεστής πρόσθεσης - προσθέτει δύο αριθμητικές τιμές. Μπορεί να
              χρησιμοποιηθεί και για να ενώσει δύο <code>String</code>
            </td>
            <td><code>int c = a + b;</code></td>
          </tr>
          <tr>
            <td>-</td>
            <td>
              Αριθμητικός τελεστής αφαίρεσης - αφαιρεί την τιμή του δεξιού
              μέλους από αυτή στο αριστερό
            </td>
            <td><code>int c = a - b;</code></td>
          </tr>
          <tr>
            <td>*</td>
            <td>
              Αριθμητικός τελεστής γινομένου - πολλαπλασιάζει μεταξύ τους δύο
              τιμές
            </td>
            <td><code>int c = a * b;</code></td>
          </tr>
          <tr>
            <td>/</td>
            <td>
              Αριθμητικός τελεστής διαίρεσης - διαιρεί την τιμή στο αριστερό
              μέλος κατά όσες φορές ορίζει η τιμή στο δεξί
            </td>
            <td><code>int c = a / b;</code></td>
          </tr>
          <tr>
            <td>==</td>
            <td>
              Λογικός τελεστής ισότητας - συγκρίνει δύο τιμές μεταξύ τους και
              επιστρέφει
              <code>true</code> αν είναι ίσες, αλλιώς επιστρέφει
              <code>false</code>
            </td>
            <td>boolean c = a == b;</td>
          </tr>
          <tr>
            <td>!=</td>
            <td>
              Λογικός τελεστής διαφοράς - συγκρίνει δύο τιμές μεταξύ τους και
              επιστρέφει
              <code>false</code> αν είναι ίσες, αλλιώς επιστρέφει
              <code>true</code>
            </td>
            <td>boolean c = a != b;</td>
          </tr>
          <tr>
            <td><=</td>
            <td>
              Λογικός τελεστής ανισότητας (μικρότερο ή ίσο) - συγκρίνει δύο
              τιμές μεταξύ τους και επιστρέφει
              <code>true</code> αν είναι ίσες ή αν αυτή στα δεξιά είναι
              μικρότερη, αλλιώς επιστρέφει <code>false</code>. Ομοίως
              λειτουργουν και οι τελεστές (<code><, >, >=</code>)
            </td>
            <td>boolean c = a <= b;</td>
          </tr>
          <tr>
            <td>&&</td>
            <td>
              Λογικός τελεστής "ΚΑΙ" - επιστρέφει <code>true</code> αν
              <strong>και τα δύο</strong> μέλη είναι <code>true</code>, αλλιώς
              επιστρέφει <code>false</code>
            </td>
            <td>boolean c = a && b;</td>
          </tr>
          <tr>
            <td>||</td>
            <td>
              Λογικός τελεστής "Η (διαζευκτικό)" - επιστρέφει
              <code>false</code> αν <strong>και τα δύο</strong> μέλη είναι
              <code>false</code>, αλλιώς επιστρέφει <code>true</code>
            </td>
            <td>boolean c = a || b;</td>
          </tr>
          <tr>
            <td>!</td>
            <td>
              Λογικός τελεστής "ΟΧΙ (αντιστροφέας)" - επιστρέφει
              <code>true</code> αν η τιμή είναι <code>false</code>, αλλιώς
              επιστρέφει <code>true</code>
            </td>
            <td>boolean c = !a;</td>
          </tr>
        </table>
      </div>
    </div>
  </article>
  <article>
    <h3>Δομή Ελέγχου</h3>
    <div class="content-grid">
      <p class="grid-col-span-2">
        Η <strong>δομή ελέγχου</strong> είναι από τα ποιο βασικά εργαλεία στον
        προγραμματισμό. Βασιζόμαστε σε αυτή για την λογική του προγράμματος που
        γράφουμε.
      </p>
      <div class="list grid-row-span-3">
        <p>
          Η δομή ελέγχου έχει τρεις μορφές, όπως αυτές φαίνονται στα τμήματα
          κώδικα.
        </p>
        <ol>
          <li>Την απλή. <code>if</code></li>
          <li>Την απλή, με εναλλακτική. <code>if/else</code></li>
          <li>Τη σύνθετη. <code>if/else if/else</code></li>
        </ol>
        <p>
          Η συνθήκη που δέχεται η δομή ελέγχου καθορίζει ποιο μέρος της θα
          εκτελεστεί όταν ο υπολογιστής διαβάζει το πρόγραμμα.<br /><br />
          <strong>Αν</strong> η συνθήκη είναι
          <strong>αληθής</strong> (<code>true</code>), εκτελείτε το πρώτο τμήμα
          κώδικα, <strong>αλλιώς</strong> - αν υπάρχει - το δεύτερο. Στην
          περίπτωση των σύνθετων δομών ελέχγου, πραγματοποιείται επίσης έλεγχος
          των ενδιάμεσων συνθηκών.<br /><br />
          Στην περίπτωση της δεύτερης και της τρίτης μορφής, εκτελείτε μόνο η
          πρώτη αληθής συνθήκη και δεν γίνεται έλεγχος της επόμενης.<br /><br />
          Ακολουθεί πρακτικό παράδειγμα χρήσης δομής ελέγχου.
        </p>
      </div>
      <div class="code-grid">
        <pre><code class="java">// Απλή δομή ελέγχου
if (/* συνθήκη */) {
  // κάνε κάτι
}</code></pre>
      </div>
      <div class="code-grid">
        <pre><code class="java">// Απλή δομή ελέγχου με εναλλακτική
if (/* συνθήκη */) {
  // κάνε κάτι
}
else {
  // κάνε κάτι άλλο
}</code></pre>
      </div>
      <div class="code-grid">
        <pre><code class="java">// Σύνθετη δομή ελέγχου
if (/* συνθήκη 1 */) {
  // κάνε κάτι
}
else if (/* συνθήκη 2 */) {
  // κάνε κάτι άλλο
}
else {
  // κάνε κάτι άλλο
}</code></pre>
      </div>
      <div class="code-grid grid-col-span-2">
        <pre><code class="java">int number = 2;

if (number > 3) {
  System.out.println("Ο αριθμός είναι μεγαλύτερος του 3!");
}
else if (number < 3) {
  System.out.println("Ο αριθμός είναι μικρότερος του 3!");
}
else {
  System.out.println("Ο αριθμός είναι το 3!");
}
</code></pre>
      </div>
      <p class="grid-col-span-2">Απάντηση</p>
      <div class="code-grid grid-col-span-2">
        <pre><code class="bash">Ο αριθμός είναι μικρότερος του 3!</code></pre>
      </div>
      <p class="grid-col-span-2">
        <strong>Bonus - Παρατήρησες κάτι καινούργιο; Μην τρομάζεις!</strong
        ><br /><br />
        Η μέθοδος <code>System.out.println()</code> χρησιμοποιείται στην Java
        για την εκτύπωση δεδομένων στην κονσόλα.<br /><br />
        Τι είναι η <strong>μέθοδος</strong>; Αυτο θα το δούμε παρακάτω στις
        <strong>κλάσεις</strong>!
      </p>
    </div>
  </article>
  <article>
    <h3>Δομές Επανάληψης</h3>
    <div class="content-grid">
      <p class="grid-col-span-2">
        Με πολύ απλά λόγια, μια δομή επανάληψης περιέχει μια διαδικασία που
        επαναλαμβάνεται.<br /><br />
        Η Java έχει τρεις βασικές δομές επανάληψης: την <code>for</code>, την
        <code>while</code>, και την <code>do - while</code>. Κάθε μια από αυτές
        για να δουλέψει χρειάζεται μια συνθήκη. Στην περίπτωση των δομών
        <code>while</code> και <code>do - while</code> οι συνθήκες είναι όπως
        αυτές που είδαμε στις δομές ελέγχου, ενώ στην δομή
        <code>for</code> διαφέρει λίγο. Η πιο συνηθισμένη συνθήκη της δομής
        <code>for</code> έχει αυτή τη μορφή
        <code>for(int i = 0; i < end; i++)</code>.
      </p>
      <p>
        Ας δούμε αυτό το παράδειγμα για την δομή <code>for</code>, για να την
        κατανοήσουμε καλύτερα.<br /><br />
        Η συνθήκη χωρίζεται σε τρία μέρη με το semicolon, το οποίο έχουμε
        αναφέρει πως χωρίζει εντολές μεταξύ τους.<br /><br />
        Στο πρώτο μέρος αρχικοποιούμε μια μεταβλητή
        <code>i</code> με την τιμή <code>0</code>.<br />
        Στο δεύτερο μέρος ορίζουμε μια συνθήκη όπως αυτές που είδαμε στις δομές
        ελέγχου. Αν η συνθήκη είναι <code>true</code> η δομή επανάληψης
        εκτελείται.<br />
        Και, τέλος στο τρίτο μέρος κάνουμε μία πράξη - το βήμα της επανάληψης.
        Αφού εκτελεστεί η δομή, το <code>i</code> θα πάρει την τιμή αυτή που
        ορίζει η πράξη στο βήμα.
      </p>
      <div class="code-grid centered-code">
        <pre><code class="java">/*
for (αρχή; συνθήκη; βήμα) {
  ενέργειες
}
*/

// Η δομή θα εκτελεστεί 10 φορές
for (int i = 0; i < 10; i = i + 1) {
  System.out.println("κέικ");
}

// Η δομή θα εκτελεστεί 5 φορές
for (int i = 0; i < 10; i = i + 2) {
  System.out.println("μπέικιν-πάουντερ")
}
</code></pre>
      </div>
      <p class="grid-col-span-2">
        Η δομές <code>while</code> και <code>do - while</code> λειτουργούν με
        παρόμοιο τρόπο. Ωστόσο, και για τις δύο χρειαζόμαστε μια μεταβλητή που
        θα χρησιμοποίησουμε στην συνθήκη, και θα έχει δηλωθεί έξω από τη δομή,
        την συνθήκη, και κάποιο βήμα εντός της επανάληψης.
      </p>
      <p>
        Η δομή <code>while</code> πραγματοποιεί έλεγχο της συνθήκης πριν
        εκτελέσει τον κώδικα στο εσωτερικό της, πράγμα που σημαίνει ότι αν η
        συνθήκη είναι εξαρχής <code>false</code> ο κώδικας δεν θα εκτελεστεί
        ποτέ.
      </p>
      <div class="code-grid centered-code">
        <pre><code class="java">int i = 0;
while (i < 10) {
  System.out.println("Hello");
  i = i + 1;
}</code></pre>
      </div>
      <p>
        Η δομή <code>do - while</code> λειτουργεί σχεδόν με τον ίδιο τρόπο όπως
        η <code>while</code> αλλά, ο κώδικας πάντα θα εκτελείται τουλάχιστον μια
        φορά. Γιατί; Πολύ απλα, επειδή ο έλεγχος της συνθήκης γίνεται στο τέλος
        της κάθε εκτέλεσης.
      </p>
      <div class="code-grid centered-code">
        <pre><code class="java">int i = 0;
do {
  System.out.println("World")
  i = i + 1;
} while (i < 10);</code></pre>
      </div>
      <p>
        <strong>Προσοχή</strong>, αν ή συνθήκη είναι πάντα αληθής σε μια
        επανάληψη, τότε έχουμε πρόβλημα
        <strong>ατέρμων βρόχου</strong> (infinite loop), μια επαναληπτική
        διαδικασία που δεν τελειώνει ποτέ!
      </p>
      <div class="code-grid centered-code">
        <pre><code class="java">while (true) {
  System.out.println("Infinite Loop!")
}</code></pre>
      </div>
      <p class="grid-col-span-2">
        <strong
          >Bonus - Τελεστές <code>++</code>, <code>--</code>, <code>+=</code>,
          <code>-=</code></strong
        ><br /><br />
        Πολλές φορές, στις δομές επανάληψης, και κυρίως την <code>for</code>,
        στο βήμα μπορεί να δούμε έναν από τους παραπάνω τελεστές. Οι τελεστές
        <code>++</code> και <code>--</code> είναι για αύξηση ή μείωση μιας
        αριθμητικής τιμής κατά 1, ενώ οι τελεστές <code>+=</code> και
        <code>-=</code> είναι για αύξση ή μείωση μιας αριθμητικής τιμής κατά
        κάποια τιμή που ορίζουμε εμείς.<br /><br />

        Για παράδειγμα, έστω <code>int num = 1;</code>, τότε<br /><br />
        <code>num++; //num = 2</code><br />
        <code>num--; //num = 1, μείωση κατά 1 από το παραπάνω παράδειγμα</code
        ><br />
        <code>num += 3; //num = 4</code><br />
        <code>num -= 5; //num = -1</code>
      </p>
    </div>
  </article>
</section>
<div class="fade-in popup-msg">
  Lorem ipsum dolor, sit amet consectetur adipisicing elit. Cumque, impedit.
</div>
<section class="content bg-clr-contrast unit-theory">
  <h2 class="fg-clr-light">Unit 2</h2>
  <article>
    <p>
      Lorem ipsum dolor sit, amet consectetur adipisicing elit. Eligendi officia
      quidem iure minima debitis quam quis quasi numquam rem, odit earum
      repellat quo delectus mollitia aperiam praesentium reprehenderit omnis
      quibusdam cupiditate eos ex iusto? Id sit culpa tenetur voluptatum!
      Doloremque amet, aspernatur velit error quam facilis autem consequuntur
      mollitia beatae adipisci unde rerum reprehenderit eligendi repellat
      deleniti dolores pariatur sit officia natus qui dicta at a. Totam illo
      expedita sit unde, saepe harum enim debitis alias vitae architecto nostrum
      accusantium delectus, reiciendis repellendus libero perferendis
      exercitationem vero tenetur nam blanditiis minima? Id tempora atque
      assumenda illum temporibus!
    </p>
  </article>
</section>
<div class="fade-in popup-msg">
  Lorem ipsum dolor, sit amet consectetur adipisicing elit. Cumque, impedit.
</div>
<section class="content bg-clr-contrast unit-theory">
  <h2 class="fg-clr-light">Unit 3</h2>
  <article>
    <p>
      Lorem ipsum dolor, sit amet consectetur adipisicing elit. Asperiores
      itaque quidem dolorum pariatur vero adipisci dignissimos ea officia
      necessitatibus harum exercitationem dolor tenetur amet minus quibusdam
      velit et atque repellat, molestiae sunt quod modi sint! Possimus pariatur
      corrupti non minus. Repudiandae itaque doloribus atque dolorem animi
      fugiat asperiores voluptates dolor, alias perferendis officiis at
      recusandae dicta laboriosam necessitatibus veritatis, iure voluptatem
      error nemo quam quod obcaecati reprehenderit id. Vero cum dolores,
      expedita aut esse excepturi, repudiandae numquam aperiam delectus ab illo
      voluptatum! Saepe eaque delectus esse, eius molestiae numquam aspernatur
      culpa nemo? Quidem velit ex, neque a recusandae voluptatum amet suscipit
      cupiditate saepe facere nisi molestias obcaecati ipsam perspiciatis?
      Delectus sapiente ullam neque commodi hic quae labore, culpa, aliquid fuga
      magni facere natus beatae tempore cum consequatur qui iure nesciunt
      consequuntur. Similique deserunt placeat rerum optio neque aut
      perspiciatis doloremque in voluptate voluptatum reprehenderit, sit
      officiis ducimus doloribus, libero ipsa, molestias atque nihil aliquid
      iste ad repellat! Commodi vero odio, amet doloremque ad dolores. Id, quasi
      delectus.
    </p>
  </article>
</section>
